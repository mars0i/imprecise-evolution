(** setchainPDFs:

    Executable wrapper that uses Wright-Fisher diploid models with
    random mating, selection, and drift to create PDF plots of setchains
    of population-level allele frequencies. *)

module Command = Core.Command
module Spec = Core.Command.Spec
module Main = Models.Main

(* TODO: 
 * Add option to control fill color.
 * Add option to control number of pmap forks.
 *)


let sprintf = Printf.sprintf

let description = sprintf
"Creates plots of estimated bounds of setchains of probabilities of 
population-level allele frequencies using \"credal sets\" of evolutionary
transition probabilities, which are generated by diploid Wright-Fisher 
models with random mating and selection.

BASENAME: PDF filenames consist of this string followed by generation numbers.

POPSIZE, INITFREQ: Integers specifying the 2N number of alleles in the
population and the initial frequency of the A allele.

STARTGEN LASTGEN: First and last generations for which to generate PDFs.
(Generation 0 in which INITFREQ has a  probability of 1 can't be plotted.)

[FITN ...]: Triples of fitness values in the order:
    w11 (AA homozygote), w12 (heterozygote), w22 (BB heterozygote)
At least one triple is required (despite brackets above).  The setchain
will be constructed from the the tight matrix interval containing the
the transition matrices for these fitness triples.

Example: %s foo 500 250 2 6  1.0 0.95 0.8  0.8 0.95 1.0"
(Filename.basename(Sys.executable_name))

let rows_docstring = sprintf "integer number of rows for multi-plot pages (default %d)" 1
let cols_docstring = sprintf "integer number of columns for multi-plot pages (default %d)" 1
let plot_max_docstring = "float If present, sets max height for all plots."
let fontsize_docstring = "float If present, sets font size."
let sample_docstring = sprintf "sample data to plot only at every nth frequency (default %d)" 1
let skip_docstring = sprintf "skip to every i'th generation (default %d)" 1
let updown_docstring = "If present arrange plots top bottom right; vs left right down."
let nofork_docstring = "If present, don't split computation across multiple cores/CPUs."

let commandline =
  Command.basic_spec  (* TODO this is apparently depcrecated, or at least Spec below is. Maybe switch to dbuenzli's cmdliner *)
    ~summary:"Make 3D pdfs for multiple generations with setchains."
    ~readme:(fun () -> description)
    Spec.(empty +> flag "-r" (optional_with_default 1 int) ~doc:rows_docstring
                +> flag "-c" (optional_with_default 1 int) ~doc:cols_docstring
                +> flag "-m" (optional float) ~doc:plot_max_docstring
                +> flag "-f" (optional float) ~doc:fontsize_docstring
                +> flag "-s" (optional_with_default 1 int) ~doc:sample_docstring
                +> flag "-i" (optional_with_default 1 int) ~doc:skip_docstring
                +> flag "-u" no_arg ~doc:updown_docstring
                +> flag "-1" no_arg ~doc:nofork_docstring
                +> anon ("basename" %: string)
                +> anon ("popsize" %: int)
                +> anon ("initfreq" %: int)
                +> anon ("startgen" %: int)
                +> anon ("lastgen" %: int)
                +> anon (sequence ("fitn" %: float)))
    Main.make_setchain_and_save_for_commandline

let () = Command.run ~version:"1.2" ~build_info:"setchainPDFS, (c) 2017, 2018 Marshall Abrams" commandline
